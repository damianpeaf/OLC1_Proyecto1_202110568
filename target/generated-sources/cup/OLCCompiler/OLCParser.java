
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package OLCCompiler;

import OLCCompiler.Set.*;
import OLCCompiler.Tree.*;
import OLCCompiler.Error.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class OLCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return OLCParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public OLCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public OLCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OLCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\005\000\002\016" +
    "\004\000\002\016\003\000\002\003\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\004\004\000" +
    "\002\005\003\000\002\005\003\000\002\006\004\000\002" +
    "\006\002\000\002\007\010\000\002\020\003\000\002\020" +
    "\003\000\002\021\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\022\004\000" +
    "\002\024\005\000\002\024\002\000\002\010\006\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\025\005\000\002\013\004\000\002" +
    "\014\006\000\002\015\004\000\002\015\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\006\004\001\002\000\006\004\010\005" +
    "\014\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\010\004\010\005\014\013\ufff5\001\002\000" +
    "\004\010\070\001\002\000\010\004\ufff8\005\ufff8\013\ufff8" +
    "\001\002\000\004\007\067\001\002\000\004\013\054\001" +
    "\002\000\006\012\020\034\016\001\002\000\010\004\ufff7" +
    "\005\ufff7\013\ufff7\001\002\000\004\035\053\001\002\000" +
    "\032\006\022\014\030\022\021\023\037\024\025\025\033" +
    "\026\031\027\040\030\036\031\026\032\023\036\027\001" +
    "\002\000\040\006\ufffe\014\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\036\ufffe\001\002\000\032\006\022" +
    "\014\030\022\021\023\037\024\025\025\033\026\031\027" +
    "\040\030\036\031\026\032\023\036\027\001\002\000\004" +
    "\005\047\001\002\000\034\006\ufffa\011\ufffa\014\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\036\ufffa\001\002\000\034\006\uffde\011" +
    "\uffde\014\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\036\uffde\001\002\000" +
    "\032\006\022\014\030\022\021\023\037\024\025\025\033" +
    "\026\031\027\040\030\036\031\026\032\023\036\027\001" +
    "\002\000\034\006\ufffb\011\ufffb\014\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\036\ufffb\001\002\000\034\006\uffe1\011\uffe1\014\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\036\uffe1\001\002\000\034\006\uffe0" +
    "\011\uffe0\014\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\036\uffe0\001\002" +
    "\000\032\006\022\014\030\022\021\023\037\024\025\025" +
    "\033\026\031\027\040\030\036\031\026\032\023\036\027" +
    "\001\002\000\034\006\uffdf\011\uffdf\014\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\036\uffdf\001\002\000\032\006\022\014\030\022" +
    "\021\023\037\024\025\025\033\026\031\027\040\030\036" +
    "\031\026\032\023\036\027\001\002\000\034\006\uffe3\011" +
    "\uffe3\014\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3\001\002\000" +
    "\004\011\043\001\002\000\034\006\ufffc\011\ufffc\014\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\036\ufffc\001\002\000\032\006\022" +
    "\014\030\022\021\023\037\024\025\025\033\026\031\027" +
    "\040\030\036\031\026\032\023\036\027\001\002\000\034" +
    "\006\uffe2\011\uffe2\014\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\036\uffe2" +
    "\001\002\000\032\006\022\014\030\022\021\023\037\024" +
    "\025\025\033\026\031\027\040\030\036\031\026\032\023" +
    "\036\027\001\002\000\034\006\uffe7\011\uffe7\014\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\036\uffe7\001\002\000\010\004\uffe9\005" +
    "\uffe9\013\uffe9\001\002\000\034\006\uffe5\011\uffe5\014\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\036\uffe5\001\002\000\034\006\uffe4" +
    "\011\uffe4\014\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\036\uffe4\001\002" +
    "\000\034\006\uffe6\011\uffe6\014\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\036\uffe6\001\002\000\004\007\050\001\002\000\034\006" +
    "\uffdd\011\uffdd\014\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\036\uffdd\001" +
    "\002\000\032\006\022\014\030\022\021\023\037\024\025" +
    "\025\033\026\031\027\040\030\036\031\026\032\023\036" +
    "\027\001\002\000\034\006\uffe8\011\uffe8\014\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\036\uffe8\001\002\000\040\006\uffff\014\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\036\uffff" +
    "\001\002\000\004\013\055\001\002\000\004\005\060\001" +
    "\002\000\004\007\ufffd\001\002\000\006\005\060\007\uffd9" +
    "\001\002\000\004\010\061\001\002\000\004\014\062\001" +
    "\002\000\004\011\063\001\002\000\006\005\uffdb\007\uffdb" +
    "\001\002\000\004\007\uffdc\001\002\000\006\005\060\007" +
    "\uffd9\001\002\000\004\007\uffda\001\002\000\004\002\000" +
    "\001\002\000\004\005\071\001\002\000\006\012\020\034" +
    "\016\001\002\000\012\017\076\020\100\021\073\036\102" +
    "\001\002\000\010\011\ufff0\015\ufff0\016\ufff0\001\002\000" +
    "\010\011\uffea\015\106\016\104\001\002\000\004\011\ufff3" +
    "\001\002\000\010\011\uffef\015\uffef\016\uffef\001\002\000" +
    "\004\011\ufff2\001\002\000\010\011\uffee\015\uffee\016\uffee" +
    "\001\002\000\004\011\103\001\002\000\010\011\uffed\015" +
    "\uffed\016\uffed\001\002\000\010\004\ufff4\005\ufff4\013\ufff4" +
    "\001\002\000\012\017\076\020\100\021\073\036\102\001" +
    "\002\000\004\011\uffec\001\002\000\012\017\076\020\100" +
    "\021\073\036\102\001\002\000\004\011\ufff1\001\002\000" +
    "\006\011\uffea\016\104\001\002\000\004\011\uffeb\001\002" +
    "\000\004\013\ufff9\001\002\000\010\004\010\005\014\013" +
    "\ufff5\001\002\000\004\013\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\002\004\001\001\000\014\003\011\004" +
    "\012\005\006\007\010\010\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\112\006\111\007\010\010" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\031\025\023" +
    "\026\033\027\034\001\001\000\002\001\001\000\012\017" +
    "\031\025\023\026\033\027\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\031\025" +
    "\023\026\033\027\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\031\025\023\026" +
    "\033\027\044\001\001\000\002\001\001\000\012\017\031" +
    "\025\023\026\033\027\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\031\025\023" +
    "\026\033\027\040\001\001\000\002\001\001\000\012\017" +
    "\031\025\023\026\033\027\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\031\025\023\026\033\027\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\055" +
    "\014\056\001\001\000\002\001\001\000\006\014\064\015" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\064\015\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\071\001\001\000\012\020" +
    "\100\021\074\022\076\023\073\001\001\000\002\001\001" +
    "\000\004\024\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\107\001" +
    "\001\000\002\001\001\000\004\023\106\001\001\000\002" +
    "\001\001\000\004\024\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\112\006\113\007\010\010\014" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OLCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OLCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OLCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ErrorTable errorTable = new ErrorTable();
    public SetsTable setsTable = new SetsTable();
    public ArrayList<RegexTree> regexTrees = new ArrayList<RegexTree>();
    public ArrayList<Evaluation> evaluationStrings = new ArrayList<Evaluation>();

    private int nodeCounter = 1;
    private int operatorCounter = 0;


   public void syntax_error(Symbol s) {

      if(s.sym == OLCParserSym.LEXICAL_ERROR){
        errorTable.add(new OLCError(ErrorType.LEXIC, s));
      }else{
        List<Integer> ids = expected_token_ids();

        if(ids.size() > 0){
         ArrayList<String> expected = new ArrayList<String>();
            for(int i = 0; i < ids.size(); i++){
                expected.add(symbl_name_from_id(ids.get(i)));
            }
            errorTable.add(new OLCError(ErrorType.SYNTAX, s, expected));
            return;
        }

        errorTable.add(new OLCError(ErrorType.SYNTAX, s));
      }
   }

   protected int error_sync_size() {
   // !
       return 1;
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$OLCParser$actions {
  private final OLCParser parser;

  /** Constructor */
  CUP$OLCParser$actions(OLCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$OLCParser$do_action_part00000000(
    int                        CUP$OLCParser$act_num,
    java_cup.runtime.lr_parser CUP$OLCParser$parser,
    java.util.Stack            CUP$OLCParser$stack,
    int                        CUP$OLCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OLCParser$result;

      /* select the action based on the action number */
      switch (CUP$OLCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		RESULT = start_val;
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OLCParser$parser.done_parsing();
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= LBRACE scopes RBRACE 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compound_arrow ::= ARROW_TAIL ARROW_HEAD 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("compound_arrow",12, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // compound_arrow ::= ARROW 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("compound_arrow",12, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scopes ::= decl_scope SCOPE_BREAK SCOPE_BREAK stmt_scope 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("scopes",1, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // escaped_sequence ::= ESCAPED_LINEBREAK 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = String.valueOf(s); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("escaped_sequence",13, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // escaped_sequence ::= ESCAPED_SINGLE_QUOTE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = String.valueOf(s); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("escaped_sequence",13, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // escaped_sequence ::= ESCAPED_DOUBLE_QUOTE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = String.valueOf(s); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("escaped_sequence",13, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_scope ::= decl decls 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("decl_scope",2, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= set_decl 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= regex_decl 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decls ::= decl decls 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("decls",4, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decls ::= 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("decls",4, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_decl ::= SET_DECLARATION COLON IDENTIFIER compound_arrow set SEMICOLON 
            {
              Object RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).right;
		Object sn = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Set s = (Set)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		 s.setName(String.valueOf(sn)); setsTable.add(s); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_decl",5, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-5)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set ::= compr_set 
            {
              Set RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Set s = (Set)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set",14, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set ::= extend_set 
            {
              Set RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Set s = (Set)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set",14, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compr_set ::= set_element TILDE set_element 
            {
              Set RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)).right;
		SetElement e1 = (SetElement)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		SetElement e2 = (SetElement)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		
    Set set = new ComprehensionSet();
    ArrayList<SetElement> elements = new ArrayList<SetElement>();
    elements.add(e1);
    elements.add(e2);
    set.addElements(elements);
    RESULT = set;
 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("compr_set",15, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_element ::= ASCII 
            {
              SetElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new SetElement(SetElementType.ASCII, String.valueOf(e));  
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_element",17, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_element ::= LOWERCASE 
            {
              SetElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new SetElement(SetElementType.LOWERCASE, String.valueOf(e));  
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_element",17, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_element ::= UPPERCASE 
            {
              SetElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new SetElement(SetElementType.UPPERCASE, String.valueOf(e));  
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_element",17, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_element ::= DIGIT 
            {
              SetElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new SetElement(SetElementType.DIGIT, String.valueOf(e));  
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_element",17, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // extend_set ::= set_element set_elements 
            {
              Set RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		SetElement e1 = (SetElement)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		ArrayList<SetElement> es = (ArrayList<SetElement>)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		
    ArrayList<SetElement> elements = new ArrayList<SetElement>();
    elements.add(e1);

    if(es != null){
        es.forEach((e) -> elements.add(e));
    }

    Set set = new ExtensionSet();
    set.addElements(elements);
    RESULT = set;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("extend_set",16, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // set_elements ::= COMMA set_element set_elements 
            {
              ArrayList<SetElement> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		SetElement e1 = (SetElement)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		ArrayList<SetElement> es = (ArrayList<SetElement>)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		
    ArrayList<SetElement> elements = new ArrayList<SetElement>();
    elements.add(e1);
    if(es != null){
        es.forEach((e) -> elements.add(e));
    }
    RESULT = elements;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_elements",18, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_elements ::= 
            {
              ArrayList<SetElement> RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_elements",18, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // regex_decl ::= IDENTIFIER compound_arrow regex_term SEMICOLON 
            {
              Object RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).right;
		Object na = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Node no = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		

  Node acceptNode = new Node(nodeCounter++, NodeType.NODE_ACCEPT, "#");
  Node rootNode = new Node(operatorCounter++, NodeType.NODE_AND, ".", no, acceptNode);
  RegexTree tree = new RegexTree(String.valueOf(na), rootNode, errorTable);
  regexTrees.add(tree);
  nodeCounter = 0;
  operatorCounter = 0;


              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_decl",6, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // regex_term ::= AND regex_term regex_term 
            {
              Node RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Node nl = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		int nrleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Node nr = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(operatorCounter++, NodeType.NODE_AND, ".", nl, nr); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_term",21, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // regex_term ::= OR regex_term regex_term 
            {
              Node RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Node nl = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		int nrleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Node nr = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(operatorCounter++, NodeType.NODE_OR, "|", nl, nr); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_term",21, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // regex_term ::= KLEENE regex_term 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(operatorCounter++, NodeType.NODE_KLEENE, "*", n); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_term",21, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // regex_term ::= PLUS regex_term 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(operatorCounter++, NodeType.NODE_PLUS, "+", n); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_term",21, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // regex_term ::= QUESTION regex_term 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(operatorCounter++, NodeType.NODE_OPTIONAL,"?", n); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_term",21, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // regex_term ::= regex_terminal 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Node n = (Node)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = n; 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_term",21, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regex_terminal ::= WORD 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(nodeCounter++, NodeType.NODE_I, String.valueOf(t)); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_terminal",20, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regex_terminal ::= DIGIT 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(nodeCounter++, NodeType.NODE_I, String.valueOf(t)); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_terminal",20, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regex_terminal ::= STRING_LITERAL 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(nodeCounter++, NodeType.NODE_I, String.valueOf(t)); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_terminal",20, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // regex_terminal ::= escaped_sequence 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(nodeCounter++, NodeType.NODE_I, String.valueOf(t)); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_terminal",20, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // regex_terminal ::= set_refence 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OLCParser$stack.peek()).value;
		 RESULT = new Node(nodeCounter++, NodeType.NODE_I, new SetReference(n, setsTable)); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("regex_terminal",20, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // set_refence ::= LBRACE IDENTIFIER RBRACE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		 RESULT = String.valueOf(n); 
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("set_refence",19, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-2)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt_scope ::= eval_stmt eval_stmts 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("stmt_scope",9, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // eval_stmt ::= IDENTIFIER COLON STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)).value;
		 evaluationStrings.add(new Evaluation(String.valueOf(n), String.valueOf(s), regexTrees, errorTable));  
              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("eval_stmt",10, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-3)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // eval_stmts ::= eval_stmt eval_stmts 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("eval_stmts",11, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.elementAt(CUP$OLCParser$top-1)), ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // eval_stmts ::= 
            {
              Object RESULT =null;

              CUP$OLCParser$result = parser.getSymbolFactory().newSymbol("eval_stmts",11, ((java_cup.runtime.Symbol)CUP$OLCParser$stack.peek()), RESULT);
            }
          return CUP$OLCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$OLCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$OLCParser$do_action(
    int                        CUP$OLCParser$act_num,
    java_cup.runtime.lr_parser CUP$OLCParser$parser,
    java.util.Stack            CUP$OLCParser$stack,
    int                        CUP$OLCParser$top)
    throws java.lang.Exception
    {
              return CUP$OLCParser$do_action_part00000000(
                               CUP$OLCParser$act_num,
                               CUP$OLCParser$parser,
                               CUP$OLCParser$stack,
                               CUP$OLCParser$top);
    }
}

}
