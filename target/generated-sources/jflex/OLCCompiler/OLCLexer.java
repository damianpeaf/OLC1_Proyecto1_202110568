// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/jflex/Lexer.flex

package OLCCompiler;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class OLCLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SET = 4;
  public static final int SET_ELEMENT = 6;
  public static final int SET_OPERATOR = 8;
  public static final int REGEX = 10;
  public static final int REGEX_TEST = 12;
  public static final int REGEX_EXPRESSION = 14;
  public static final int REGEX_STRING = 16;
  public static final int SET_REFERENCE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\6\1\7\1\6\1\10\2\6\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\12\17\1\20\1\21"+
    "\1\22\1\6\1\23\1\24\1\6\2\25\1\26\6\25"+
    "\1\27\3\25\1\30\1\31\13\25\1\6\1\32\2\6"+
    "\1\33\1\6\15\34\1\35\3\34\1\36\1\34\1\37"+
    "\6\34\1\40\1\41\1\42\1\43\53\0\1\44\12\0"+
    "\1\44\4\0\1\44\5\0\27\44\1\0\37\44\1\0"+
    "\u01ca\44\4\0\14\44\16\0\5\44\7\0\1\44\1\0"+
    "\1\44\21\0\165\44\1\0\2\44\2\0\4\44\1\0"+
    "\1\44\6\0\1\44\1\0\3\44\1\0\1\44\1\0"+
    "\24\44\1\0\123\44\1\0\213\44\1\0\255\44\1\0"+
    "\46\44\2\0\1\44\6\0\51\44\10\0\55\44\1\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\0\1\44\10\0"+
    "\33\44\4\0\4\44\35\0\13\44\5\0\112\44\4\0"+
    "\146\44\1\0\10\44\2\0\12\44\1\0\23\44\2\0"+
    "\1\44\20\0\73\44\2\0\145\44\16\0\66\44\4\0"+
    "\1\44\2\0\1\44\2\0\56\44\22\0\34\44\4\0"+
    "\13\44\65\0\25\44\1\0\10\44\25\0\17\44\1\0"+
    "\201\44\2\0\12\44\1\0\23\44\1\0\10\44\2\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\1\44\3\0"+
    "\4\44\2\0\11\44\2\0\2\44\2\0\4\44\10\0"+
    "\1\44\4\0\2\44\1\0\5\44\2\0\14\44\12\0"+
    "\1\44\1\0\1\44\2\0\3\44\1\0\6\44\4\0"+
    "\2\44\2\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\2\44\1\0\2\44\2\0\1\44\1\0\5\44\4\0"+
    "\2\44\2\0\3\44\3\0\1\44\7\0\4\44\1\0"+
    "\1\44\7\0\20\44\13\0\3\44\1\0\11\44\1\0"+
    "\3\44\1\0\26\44\1\0\7\44\1\0\2\44\1\0"+
    "\5\44\2\0\12\44\1\0\3\44\1\0\3\44\2\0"+
    "\1\44\17\0\4\44\2\0\12\44\11\0\7\44\1\0"+
    "\3\44\1\0\10\44\2\0\2\44\2\0\26\44\1\0"+
    "\7\44\1\0\2\44\1\0\5\44\2\0\11\44\2\0"+
    "\2\44\2\0\3\44\10\0\2\44\4\0\2\44\1\0"+
    "\5\44\2\0\12\44\1\0\1\44\20\0\2\44\1\0"+
    "\6\44\3\0\3\44\1\0\4\44\3\0\2\44\1\0"+
    "\1\44\1\0\2\44\3\0\2\44\3\0\3\44\3\0"+
    "\14\44\4\0\5\44\3\0\3\44\1\0\4\44\2\0"+
    "\1\44\6\0\1\44\16\0\12\44\20\0\15\44\1\0"+
    "\3\44\1\0\27\44\1\0\20\44\3\0\10\44\1\0"+
    "\3\44\1\0\4\44\7\0\2\44\1\0\3\44\5\0"+
    "\4\44\2\0\12\44\20\0\4\44\1\0\10\44\1\0"+
    "\3\44\1\0\27\44\1\0\12\44\1\0\5\44\2\0"+
    "\11\44\1\0\3\44\1\0\4\44\7\0\2\44\7\0"+
    "\1\44\1\0\4\44\2\0\12\44\1\0\2\44\15\0"+
    "\4\44\1\0\10\44\1\0\3\44\1\0\63\44\1\0"+
    "\3\44\1\0\5\44\5\0\4\44\7\0\5\44\2\0"+
    "\12\44\12\0\6\44\2\0\2\44\1\0\22\44\3\0"+
    "\30\44\1\0\11\44\1\0\1\44\2\0\7\44\3\0"+
    "\1\44\4\0\6\44\1\0\1\44\1\0\10\44\6\0"+
    "\12\44\2\0\2\44\15\0\72\44\5\0\17\44\1\0"+
    "\12\44\47\0\2\44\1\0\1\44\1\0\5\44\1\0"+
    "\30\44\1\0\1\44\1\0\27\44\2\0\5\44\1\0"+
    "\1\44\1\0\6\44\2\0\12\44\2\0\4\44\40\0"+
    "\1\44\27\0\2\44\6\0\12\44\13\0\1\44\1\0"+
    "\1\44\1\0\1\44\4\0\12\44\1\0\44\44\4\0"+
    "\24\44\1\0\22\44\1\0\44\44\11\0\1\44\71\0"+
    "\112\44\6\0\116\44\2\0\46\44\1\0\1\44\5\0"+
    "\1\44\2\0\53\44\1\0\115\44\1\0\4\44\2\0"+
    "\7\44\1\0\1\44\1\0\4\44\2\0\51\44\1\0"+
    "\4\44\2\0\41\44\1\0\4\44\2\0\7\44\1\0"+
    "\1\44\1\0\4\44\2\0\17\44\1\0\71\44\1\0"+
    "\4\44\2\0\103\44\2\0\3\44\40\0\20\44\20\0"+
    "\126\44\2\0\6\44\3\0\u016c\44\2\0\21\44\1\0"+
    "\32\44\5\0\113\44\3\0\13\44\7\0\15\44\1\0"+
    "\7\44\13\0\25\44\13\0\24\44\14\0\15\44\1\0"+
    "\3\44\1\0\2\44\14\0\124\44\3\0\1\44\4\0"+
    "\2\44\2\0\12\44\41\0\3\44\2\0\12\44\6\0"+
    "\131\44\7\0\53\44\5\0\106\44\12\0\37\44\1\0"+
    "\14\44\4\0\14\44\12\0\50\44\2\0\5\44\13\0"+
    "\54\44\4\0\32\44\6\0\12\44\46\0\34\44\4\0"+
    "\77\44\1\0\35\44\2\0\13\44\6\0\12\44\15\0"+
    "\1\44\10\0\17\44\101\0\114\44\4\0\12\44\21\0"+
    "\11\44\14\0\164\44\14\0\70\44\10\0\12\44\3\0"+
    "\61\44\2\0\11\44\7\0\53\44\2\0\3\44\20\0"+
    "\3\44\1\0\47\44\5\0\372\44\1\0\33\44\2\0"+
    "\6\44\2\0\46\44\2\0\6\44\2\0\10\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\37\44\2\0"+
    "\65\44\1\0\7\44\1\0\1\44\3\0\3\44\1\0"+
    "\7\44\3\0\4\44\2\0\6\44\4\0\15\44\5\0"+
    "\3\44\1\0\7\44\102\0\2\44\23\0\1\44\34\0"+
    "\1\44\15\0\1\44\20\0\15\44\63\0\41\44\21\0"+
    "\1\44\4\0\1\44\2\0\12\44\1\0\1\44\3\0"+
    "\5\44\6\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\4\44\1\0\13\44\2\0\4\44\5\0\5\44\4\0"+
    "\1\44\21\0\51\44\u022d\0\64\44\26\0\57\44\1\0"+
    "\57\44\1\0\205\44\6\0\11\44\14\0\46\44\1\0"+
    "\1\44\5\0\1\44\2\0\70\44\7\0\1\44\17\0"+
    "\30\44\11\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\40\44\57\0\1\44\325\0\3\44\31\0"+
    "\17\44\1\0\5\44\2\0\5\44\4\0\126\44\2\0"+
    "\2\44\2\0\3\44\1\0\132\44\1\0\4\44\5\0"+
    "\53\44\1\0\136\44\21\0\33\44\65\0\306\44\112\0"+
    "\360\44\20\0\215\44\103\0\56\44\2\0\15\44\3\0"+
    "\34\44\24\0\63\44\1\0\12\44\1\0\163\44\45\0"+
    "\11\44\2\0\147\44\2\0\65\44\2\0\5\44\60\0"+
    "\61\44\30\0\64\44\14\0\106\44\12\0\12\44\6\0"+
    "\30\44\3\0\1\44\1\0\61\44\2\0\44\44\14\0"+
    "\35\44\3\0\101\44\16\0\13\44\6\0\37\44\1\0"+
    "\67\44\11\0\16\44\2\0\12\44\6\0\27\44\3\0"+
    "\111\44\30\0\3\44\2\0\20\44\2\0\5\44\12\0"+
    "\6\44\2\0\6\44\2\0\6\44\11\0\7\44\1\0"+
    "\7\44\1\0\53\44\1\0\14\44\10\0\173\44\1\0"+
    "\2\44\2\0\12\44\6\0\244\44\14\0\27\44\4\0"+
    "\61\44\4\0\156\44\2\0\152\44\46\0\7\44\14\0"+
    "\5\44\5\0\14\44\1\0\15\44\1\0\5\44\1\0"+
    "\1\44\1\0\2\44\1\0\2\44\1\0\154\44\41\0"+
    "\153\44\22\0\100\44\2\0\66\44\50\0\14\44\4\0"+
    "\20\44\20\0\20\44\3\0\2\44\30\0\3\44\40\0"+
    "\5\44\1\0\207\44\23\0\12\44\7\0\32\44\4\0"+
    "\1\44\1\0\32\44\13\0\131\44\3\0\6\44\2\0"+
    "\6\44\2\0\6\44\2\0\3\44\43\0\14\44\1\0"+
    "\32\44\1\0\23\44\1\0\2\44\1\0\17\44\2\0"+
    "\16\44\42\0\173\44\105\0\65\44\210\0\1\44\202\0"+
    "\35\44\3\0\61\44\17\0\1\44\37\0\40\44\15\0"+
    "\36\44\5\0\53\44\5\0\36\44\2\0\44\44\4\0"+
    "\10\44\1\0\5\44\52\0\236\44\2\0\12\44\6\0"+
    "\44\44\4\0\44\44\4\0\50\44\10\0\64\44\234\0"+
    "\67\44\11\0\26\44\12\0\10\44\230\0\6\44\2\0"+
    "\1\44\1\0\54\44\1\0\2\44\3\0\1\44\2\0"+
    "\27\44\12\0\27\44\11\0\37\44\101\0\23\44\1\0"+
    "\2\44\12\0\26\44\12\0\32\44\106\0\70\44\6\0"+
    "\2\44\100\0\4\44\1\0\2\44\5\0\10\44\1\0"+
    "\3\44\1\0\35\44\2\0\3\44\4\0\1\44\40\0"+
    "\35\44\3\0\35\44\43\0\10\44\1\0\36\44\31\0"+
    "\66\44\12\0\26\44\12\0\23\44\15\0\22\44\156\0"+
    "\111\44\67\0\63\44\15\0\63\44\15\0\50\44\10\0"+
    "\12\44\306\0\35\44\12\0\1\44\10\0\41\44\217\0"+
    "\27\44\11\0\107\44\37\0\12\44\17\0\74\44\25\0"+
    "\31\44\7\0\12\44\6\0\65\44\1\0\12\44\4\0"+
    "\3\44\11\0\44\44\2\0\1\44\11\0\105\44\4\0"+
    "\4\44\3\0\13\44\1\0\1\44\43\0\22\44\1\0"+
    "\45\44\6\0\1\44\101\0\7\44\1\0\1\44\1\0"+
    "\4\44\1\0\17\44\1\0\12\44\7\0\73\44\5\0"+
    "\12\44\6\0\4\44\1\0\10\44\2\0\2\44\2\0"+
    "\26\44\1\0\7\44\1\0\2\44\1\0\5\44\1\0"+
    "\12\44\2\0\2\44\2\0\3\44\2\0\1\44\6\0"+
    "\1\44\5\0\7\44\2\0\7\44\3\0\5\44\213\0"+
    "\113\44\5\0\12\44\4\0\2\44\40\0\106\44\1\0"+
    "\1\44\10\0\12\44\246\0\66\44\2\0\11\44\27\0"+
    "\6\44\42\0\101\44\3\0\1\44\13\0\12\44\46\0"+
    "\71\44\7\0\12\44\66\0\33\44\2\0\17\44\4\0"+
    "\12\44\306\0\73\44\145\0\112\44\25\0\1\44\240\0"+
    "\10\44\2\0\56\44\2\0\10\44\1\0\2\44\33\0"+
    "\77\44\10\0\1\44\10\0\112\44\3\0\1\44\42\0"+
    "\71\44\7\0\11\44\1\0\55\44\1\0\11\44\17\0"+
    "\12\44\30\0\36\44\2\0\26\44\1\0\16\44\111\0"+
    "\7\44\1\0\2\44\1\0\54\44\3\0\1\44\1\0"+
    "\2\44\1\0\11\44\10\0\12\44\6\0\6\44\1\0"+
    "\2\44\1\0\45\44\1\0\2\44\1\0\6\44\7\0"+
    "\12\44\u0136\0\27\44\11\0\232\44\146\0\157\44\21\0"+
    "\304\44\274\0\57\44\321\0\107\44\271\0\71\44\7\0"+
    "\37\44\1\0\12\44\146\0\36\44\2\0\5\44\13\0"+
    "\67\44\11\0\4\44\14\0\12\44\11\0\25\44\5\0"+
    "\23\44\260\0\100\44\200\0\113\44\4\0\71\44\7\0"+
    "\21\44\100\0\2\44\1\0\1\44\34\0\370\44\10\0"+
    "\363\44\15\0\37\44\61\0\3\44\21\0\4\44\10\0"+
    "\u018c\44\4\0\153\44\5\0\15\44\3\0\11\44\7\0"+
    "\12\44\3\0\2\44\306\0\5\44\3\0\6\44\10\0"+
    "\10\44\2\0\7\44\36\0\4\44\224\0\3\44\273\0"+
    "\125\44\1\0\107\44\1\0\2\44\2\0\1\44\2\0"+
    "\2\44\2\0\4\44\1\0\14\44\1\0\1\44\1\0"+
    "\7\44\1\0\101\44\1\0\4\44\2\0\10\44\1\0"+
    "\7\44\1\0\34\44\1\0\4\44\1\0\5\44\1\0"+
    "\1\44\3\0\7\44\1\0\u0154\44\2\0\31\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\10\44\2\0\151\44\4\0\62\44\10\0"+
    "\1\44\16\0\1\44\26\0\5\44\1\0\17\44\120\0"+
    "\7\44\1\0\21\44\2\0\7\44\1\0\2\44\1\0"+
    "\5\44\325\0\55\44\3\0\16\44\2\0\12\44\4\0"+
    "\1\44\u0171\0\72\44\6\0\305\44\13\0\7\44\51\0"+
    "\114\44\4\0\12\44\246\0\4\44\1\0\33\44\1\0"+
    "\2\44\1\0\1\44\2\0\1\44\1\0\12\44\1\0"+
    "\4\44\1\0\1\44\1\0\1\44\6\0\1\44\4\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\3\44\1\0"+
    "\2\44\1\0\1\44\2\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\2\44\1\0"+
    "\1\44\2\0\4\44\1\0\7\44\1\0\4\44\1\0"+
    "\4\44\1\0\1\44\1\0\12\44\1\0\21\44\5\0"+
    "\3\44\1\0\5\44\1\0\21\44\164\0\32\44\6\0"+
    "\32\44\6\0\32\44\166\0\327\44\51\0\65\44\13\0"+
    "\336\44\2\0\u0182\44\16\0\u0131\44\37\0\36\44\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\2\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\3\1\11\2\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\2\1\20\2\17\1\21\1\5"+
    "\1\22\1\23\1\24\4\25\1\26\1\25\1\27\2\25"+
    "\1\30\1\31\1\32\1\3\1\33\1\34\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\17\1\2\1\47\3\17\1\50\1\51\1\52"+
    "\1\2\1\0\1\12\1\53\1\54\1\55\1\17\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\17\2\0"+
    "\1\12\4\17\1\0\1\2\1\65\1\17\1\2\1\17"+
    "\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0172\0\u0197\0\u0172\0\u01bc\0\u0172"+
    "\0\u01e1\0\u0206\0\u022b\0\u0172\0\u0172\0\u0250\0\u0172\0\u0275"+
    "\0\u029a\0\u02bf\0\u0172\0\u0172\0\u0172\0\u022b\0\u02e4\0\u02e4"+
    "\0\u0172\0\u0309\0\u032e\0\u0353\0\u0378\0\u0172\0\u0172\0\u039d"+
    "\0\u0172\0\u01bc\0\u01e1\0\u0206\0\u022b\0\u0250\0\u022b\0\u02bf"+
    "\0\u022b\0\u022b\0\u0172\0\u022b\0\u022b\0\u022b\0\u0172\0\u03c2"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u0172\0\u0172\0\u03e7\0\u03e7\0\u0172\0\u040c\0\u0431\0\u0456"+
    "\0\u0172\0\u0172\0\u0172\0\u047b\0\u04a0\0\u04c5\0\u0172\0\u0172"+
    "\0\u0172\0\u04ea\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u0172\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed"+
    "\0\u0612\0\u0637\0\u0534\0\u0275\0\u065c\0\u05a3\0\u0681\0\u05ed";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\15\3\16\1\17\3\16\1\20\1\21"+
    "\1\16\1\22\1\23\1\24\1\25\1\26\1\27\1\16"+
    "\1\30\1\31\3\30\1\32\5\30\1\33\1\16\1\34"+
    "\1\35\1\36\1\37\1\40\1\14\1\15\1\37\1\41"+
    "\2\37\1\16\5\37\1\42\3\37\1\43\7\37\1\44"+
    "\12\37\1\13\2\14\1\15\3\16\1\17\3\16\1\20"+
    "\1\45\1\16\1\22\1\23\1\24\1\46\1\26\1\47"+
    "\1\16\5\50\1\32\5\50\1\33\1\16\1\34\1\35"+
    "\1\36\1\13\2\14\1\15\3\51\1\52\4\51\1\53"+
    "\1\51\1\54\1\55\2\51\1\56\2\51\5\57\1\60"+
    "\1\61\4\62\4\51\1\36\1\13\2\14\1\15\3\16"+
    "\1\17\3\16\1\63\1\21\1\16\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\16\5\64\1\32\1\65\4\66"+
    "\1\33\1\16\1\34\1\67\1\36\1\13\2\14\1\15"+
    "\3\16\1\17\3\16\1\20\1\70\1\16\1\22\1\23"+
    "\1\71\1\46\1\26\1\72\1\16\5\64\1\32\1\65"+
    "\4\66\1\33\1\16\1\34\1\35\1\36\1\13\2\14"+
    "\1\15\1\16\1\73\1\16\1\17\3\16\1\20\1\21"+
    "\1\16\1\22\1\23\1\24\1\46\1\26\1\27\1\16"+
    "\5\64\1\32\1\65\4\66\1\33\1\16\1\34\1\35"+
    "\1\36\1\13\2\14\1\15\1\16\1\74\1\16\1\17"+
    "\1\16\1\75\1\76\1\20\1\21\1\77\1\22\1\55"+
    "\1\24\1\25\1\26\1\27\1\100\5\36\1\32\5\36"+
    "\1\101\1\102\1\34\1\35\1\36\1\103\1\104\1\14"+
    "\1\15\1\103\1\105\2\103\1\16\5\103\1\106\3\103"+
    "\1\107\7\103\1\110\12\103\1\13\2\14\1\15\3\16"+
    "\1\17\3\16\1\20\1\21\1\16\1\22\1\23\1\24"+
    "\1\46\1\26\1\27\1\16\5\50\1\32\5\50\1\33"+
    "\1\16\1\111\1\35\1\36\47\0\1\14\51\0\1\112"+
    "\60\0\1\113\37\0\1\114\45\0\1\36\5\0\5\36"+
    "\1\0\5\36\4\0\1\36\4\0\1\115\57\0\1\30"+
    "\5\0\5\30\1\0\5\30\4\0\1\36\17\0\1\30"+
    "\5\0\4\30\1\116\1\0\5\30\4\0\1\36\5\0"+
    "\1\117\2\0\1\120\24\0\1\121\7\0\2\37\2\0"+
    "\1\37\1\0\2\37\1\0\21\37\1\0\14\37\2\0"+
    "\1\37\1\0\2\37\1\0\5\37\1\114\13\37\1\0"+
    "\14\37\2\0\1\122\1\0\2\37\1\0\21\37\1\0"+
    "\12\37\5\0\1\123\2\0\1\124\24\0\1\125\1\126"+
    "\1\127\30\0\1\130\40\0\1\50\5\0\5\50\1\0"+
    "\5\50\4\0\1\36\23\0\1\131\21\0\2\103\2\0"+
    "\1\103\1\0\2\103\1\0\36\103\2\0\1\103\1\0"+
    "\2\103\1\0\5\103\1\114\30\103\2\0\1\132\1\0"+
    "\2\103\1\0\36\103\2\0\1\103\1\123\2\103\1\124"+
    "\34\103\2\114\1\14\1\15\41\114\4\133\1\134\4\133"+
    "\1\0\33\133\17\0\1\30\5\0\3\30\1\135\1\30"+
    "\1\0\5\30\4\0\1\36\2\136\2\133\1\137\1\133"+
    "\2\136\1\133\1\37\20\136\1\133\12\136\2\140\2\133"+
    "\1\141\1\133\2\140\1\133\1\103\33\140\4\133\1\142"+
    "\44\133\1\142\16\133\1\143\21\133\17\0\1\30\5\0"+
    "\2\30\1\144\2\30\1\0\5\30\4\0\1\36\2\136"+
    "\2\133\1\145\1\133\2\136\1\133\21\136\1\133\14\136"+
    "\2\133\1\145\1\133\2\136\1\133\12\136\1\146\6\136"+
    "\1\133\12\136\2\140\2\133\1\147\1\133\2\140\1\133"+
    "\36\140\2\133\1\147\1\133\2\140\1\133\12\140\1\150"+
    "\21\140\4\133\1\142\16\133\1\14\21\133\2\136\2\133"+
    "\1\145\1\133\2\136\1\133\12\136\1\40\6\136\1\133"+
    "\12\136\2\140\2\133\1\147\1\133\2\140\1\133\12\140"+
    "\1\104\21\140";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1702];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\11\1\1\1\11\1\1\1\11\3\1\2\11"+
    "\1\1\1\11\3\1\3\11\3\1\1\11\4\1\2\11"+
    "\1\1\1\11\11\1\1\11\3\1\1\11\1\1\12\11"+
    "\2\1\1\11\3\1\3\11\1\1\1\0\1\1\3\11"+
    "\1\1\7\11\1\1\2\0\5\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OLCLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(OLCParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(OLCParserSym.LEXICAL_ERROR, yytext());
            }
          // fall through
          case 54: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 55: break;
          case 3:
            { return symbol(OLCParserSym.ASCII, yytext());
            }
          // fall through
          case 56: break;
          case 4:
            { return symbol(OLCParserSym.COMMA, yytext());
            }
          // fall through
          case 57: break;
          case 5:
            { return symbol(OLCParserSym.ARROW_TAIL, yytext());
            }
          // fall through
          case 58: break;
          case 6:
            { return symbol(OLCParserSym.DIGIT, Integer.valueOf(yytext()));
            }
          // fall through
          case 59: break;
          case 7:
            { return symbol(OLCParserSym.COLON, yytext());
            }
          // fall through
          case 60: break;
          case 8:
            { yybegin(YYINITIAL); return symbol(OLCParserSym.SEMICOLON, yytext());
            }
          // fall through
          case 61: break;
          case 9:
            { return symbol(OLCParserSym.ARROW_HEAD, yytext());
            }
          // fall through
          case 62: break;
          case 10:
            { yybegin(REGEX); return symbol(OLCParserSym.IDENTIFIER, yytext());
            }
          // fall through
          case 63: break;
          case 11:
            { return symbol(OLCParserSym.LBRACE, yytext());
            }
          // fall through
          case 64: break;
          case 12:
            { return symbol(OLCParserSym.RBRACE, yytext());
            }
          // fall through
          case 65: break;
          case 13:
            { return symbol(OLCParserSym.TILDE, yytext());
            }
          // fall through
          case 66: break;
          case 14:
            { return symbol(OLCParserSym.WORD, yytext());
            }
          // fall through
          case 67: break;
          case 15:
            { string.append( yytext() );
            }
          // fall through
          case 68: break;
          case 16:
            { yybegin(YYINITIAL); return symbol(OLCParserSym.STRING_LITERAL,string.toString());
            }
          // fall through
          case 69: break;
          case 17:
            { string.append('\\');
            }
          // fall through
          case 70: break;
          case 18:
            { return symbol(OLCParserSym.SEMICOLON, yytext());
            }
          // fall through
          case 71: break;
          case 19:
            { yybegin(SET_ELEMENT); return symbol(OLCParserSym.ARROW_HEAD, yytext());
            }
          // fall through
          case 72: break;
          case 20:
            { return symbol(OLCParserSym.IDENTIFIER, yytext());
            }
          // fall through
          case 73: break;
          case 21:
            { yybegin(SET_OPERATOR); return symbol(OLCParserSym.ASCII, yytext());
            }
          // fall through
          case 74: break;
          case 22:
            { yybegin(SET_OPERATOR); return symbol(OLCParserSym.DIGIT, Integer.valueOf(yytext()));
            }
          // fall through
          case 75: break;
          case 23:
            { yybegin(SET_OPERATOR); return symbol(OLCParserSym.UPPERCASE, yytext());
            }
          // fall through
          case 76: break;
          case 24:
            { yybegin(SET_OPERATOR); return symbol(OLCParserSym.LOWERCASE, yytext());
            }
          // fall through
          case 77: break;
          case 25:
            { yybegin(SET_ELEMENT); return symbol(OLCParserSym.COMMA, yytext());
            }
          // fall through
          case 78: break;
          case 26:
            { return symbol(OLCParserSym.UPPERCASE, yytext());
            }
          // fall through
          case 79: break;
          case 27:
            { return symbol(OLCParserSym.LOWERCASE, yytext());
            }
          // fall through
          case 80: break;
          case 28:
            { yybegin(SET_ELEMENT); return symbol(OLCParserSym.TILDE, yytext());
            }
          // fall through
          case 81: break;
          case 29:
            { yybegin(REGEX_TEST); return symbol(OLCParserSym.COLON, yytext());
            }
          // fall through
          case 82: break;
          case 30:
            { yybegin(REGEX_EXPRESSION); return symbol(OLCParserSym.ARROW_HEAD, yytext());
            }
          // fall through
          case 83: break;
          case 31:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 84: break;
          case 32:
            { string.setLength(0); yybegin(REGEX_STRING);
            }
          // fall through
          case 85: break;
          case 33:
            { return symbol(OLCParserSym.KLEENE, yytext());
            }
          // fall through
          case 86: break;
          case 34:
            { return symbol(OLCParserSym.PLUS, yytext());
            }
          // fall through
          case 87: break;
          case 35:
            { return symbol(OLCParserSym.AND, yytext());
            }
          // fall through
          case 88: break;
          case 36:
            { return symbol(OLCParserSym.QUESTION, yytext());
            }
          // fall through
          case 89: break;
          case 37:
            { yybegin(SET_REFERENCE);  return symbol(OLCParserSym.LBRACE, yytext());
            }
          // fall through
          case 90: break;
          case 38:
            { return symbol(OLCParserSym.OR, yytext());
            }
          // fall through
          case 91: break;
          case 39:
            { yybegin(REGEX_EXPRESSION); return symbol(OLCParserSym.STRING_LITERAL,string.toString());
            }
          // fall through
          case 92: break;
          case 40:
            { yybegin(REGEX_EXPRESSION); return symbol(OLCParserSym.RBRACE, yytext());
            }
          // fall through
          case 93: break;
          case 41:
            { return symbol(OLCParserSym.SCOPE_BREAK, yytext());
            }
          // fall through
          case 94: break;
          case 42:
            { return symbol(OLCParserSym.ARROW, yytext());
            }
          // fall through
          case 95: break;
          case 43:
            { return symbol(OLCParserSym.ESCAPED_DOUBLE_QUOTE, "\"");
            }
          // fall through
          case 96: break;
          case 44:
            { return symbol(OLCParserSym.ESCAPED_SINGLE_QUOTE, "\'");
            }
          // fall through
          case 97: break;
          case 45:
            { return symbol(OLCParserSym.ESCAPED_LINEBREAK, "\n");
            }
          // fall through
          case 98: break;
          case 46:
            { string.append('\"');
            }
          // fall through
          case 99: break;
          case 47:
            { string.append('\'');
            }
          // fall through
          case 100: break;
          case 48:
            { string.append('\n');
            }
          // fall through
          case 101: break;
          case 49:
            { string.append('\r');
            }
          // fall through
          case 102: break;
          case 50:
            { string.append('\t');
            }
          // fall through
          case 103: break;
          case 51:
            { yybegin(SET_ELEMENT);  return symbol(OLCParserSym.ARROW, yytext());
            }
          // fall through
          case 104: break;
          case 52:
            { yybegin(REGEX_EXPRESSION);  return symbol(OLCParserSym.ARROW, yytext());
            }
          // fall through
          case 105: break;
          case 53:
            { yybegin(SET); return symbol(OLCParserSym.SET_DECLARATION, yytext());
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
