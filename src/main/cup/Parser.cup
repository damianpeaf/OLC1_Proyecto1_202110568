package OLCCompiler;
import OLCCompiler.Set.*;
import java_cup.runtime.*;
import java.util.ArrayList;

class OLCParser;

/* -- CUSTOM CODE FOR PARSER -- */

parser code {:

    public OLCErrorTable errorTable = new OLCErrorTable();
    public OLCSetsTable setsTable = new OLCSetsTable();

   public void syntax_error(Symbol s) {

      if(s.sym == OLCParserSym.LEXICAL_ERROR){
        errorTable.add(new OLCError(OLCErrorType.LEXIC, s));
      }else{
        errorTable.add(new OLCError(OLCErrorType.SYNTAX, s));
      }
   }

:};

/* -- TERMINAL SYMBOLS -- */

terminal SET_DECLARATION,
         IDENTIFIER,
         LBRACE,
         RBRACE,
         COLON,
         SEMICOLON,
         ARROW,
         SCOPE_BREAK,
         STRING_LITERAL,
         TILDE,
         COMMA,
         LOWERCASE,
         UPPERCASE,
         ASCII,
         AND,
         OR,
         KLEENE,
         PLUS,
         QUESTION,
         WORD,
         ESCAPED_LINEBREAK,
         ESCAPED_SINGLE_QUOTE,
         ESCAPED_DOUBLE_QUOTE,
         LEXICAL_ERROR;

terminal Integer DIGIT;


/* -- NON-TERMINAL SYMBOLS -- */

non terminal program,
             scopes,
             decl_scope,
             decl,
             decls,
             set_decl,
             regex_decl,
             regex_expr,
             regex_exprs,
             regex_term,
             regex_terminal,
             set_refence,
             stmt_scope,
             eval_stmt,
             eval_stmts,
             escaped_sequence;

// SET DECLARATION
nonterminal OLCSet set;
nonterminal OLCSet compr_set;
nonterminal OLCSet extend_set;
nonterminal OLCSetElement set_element;
nonterminal ArrayList<OLCSetElement> set_elements;

/* -- GRAMATICAL RULES -- */

// INITIAL RULES
program ::= LBRACE scopes RBRACE;

scopes ::= decl_scope SCOPE_BREAK SCOPE_BREAK stmt_scope;
escaped_sequence ::= ESCAPED_LINEBREAK
                   | ESCAPED_SINGLE_QUOTE
                   | ESCAPED_DOUBLE_QUOTE;

// DECLARATION SCOPE

decl_scope ::= decl decls;
decl ::= set_decl | regex_decl;
decls ::= decl decls | ;

// SET DECLARATION
set_decl ::= SET_DECLARATION COLON IDENTIFIER:sn ARROW set:s SEMICOLON {: s.setName(String.valueOf(sn)); setsTable.add(s); :};
set ::= compr_set:s {: RESULT = s; :}
      | extend_set:s {: RESULT = s; :} ;

compr_set ::= set_element:e1 TILDE set_element:e2 {:
    OLCSet set = new OLCComprehensionSet();
    ArrayList<OLCSetElement> elements = new ArrayList<OLCSetElement>();
    elements.add(e1);
    elements.add(e2);
    set.addElements(elements);
    RESULT = set;

 :};

set_element ::= ASCII :e {: RESULT = new OLCSetElement(OLCSetElementType.ASCII, String.valueOf(e));  :}
              | LOWERCASE:e {: RESULT = new OLCSetElement(OLCSetElementType.LOWERCASE, String.valueOf(e));  :}
              | UPPERCASE:e {: RESULT = new OLCSetElement(OLCSetElementType.UPPERCASE, String.valueOf(e));  :}
              | DIGIT:e {: RESULT = new OLCSetElement(OLCSetElementType.DIGIT, String.valueOf(e));  :};

extend_set ::= set_element:e1 set_elements:es {:
    ArrayList<OLCSetElement> elements = new ArrayList<OLCSetElement>();
    elements.add(e1);

    if(es != null){
        es.forEach((e) -> elements.add(e));
    }

    OLCSet set = new OLCExtensionSet();
    set.addElements(elements);
    RESULT = set;
:};
set_elements ::= COMMA set_element:e1 set_elements:es {:
    ArrayList<OLCSetElement> elements = new ArrayList<OLCSetElement>();
    elements.add(e1);
    if(es != null){
        es.forEach((e) -> elements.add(e));
    }
    RESULT = elements;
:}
| ;


// REGEX DECLARATION
regex_decl ::= IDENTIFIER ARROW regex_expr SEMICOLON  {: System.out.println("DECLARACION DE EXPRESIÃ“N");  :} ;
regex_expr ::= regex_term regex_exprs;
regex_exprs ::= regex_term regex_exprs | ;
regex_term ::= AND regex_term regex_term
             | OR regex_term regex_term
             | KLEENE regex_term
             | PLUS regex_term
             | QUESTION regex_term
             | regex_terminal;
regex_terminal ::= WORD
                 | DIGIT
                 | STRING_LITERAL
                 | escaped_sequence
                 | set_refence;

set_refence ::= LBRACE IDENTIFIER RBRACE;

// STATEMENT SCOPE
stmt_scope ::= eval_stmt eval_stmts;
eval_stmt ::= IDENTIFIER COLON STRING_LITERAL SEMICOLON;
eval_stmts ::= eval_stmt eval_stmts | ;

